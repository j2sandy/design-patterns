design principles

1)Identify the aspects of your
application that vary and separate
them from what stays the same.(Encapsulate what varies)

2) Program to an interface, not an
implementation.

 3) favor composition over inheritance(has-a over is-a)
 
 4) Strive for loosely coupled designs
between objects that interact.

5)Classes should be open
for extension, but closed for
modification

6)Depend upon abstractions. Do not
depend upon concrete classes.

7)Dependency Inversion Principle makes an even
stronger statement about abstraction. It suggests that our
high-level components should not depend on our low-level
components; rather, they should both depend on abstractions.
 
 The Strategy Pattern defines a family of algorithms,
encapsulates each one, and makes them interchangeable.
Strategy lets the algorithm vary independently from
clients that use it.

The Observer Pattern defines a one-to-many
dependency between objects so that when one
object changes state, all of its dependents are
notified and updated automatically.

The Decorator Pattern attaches additional
responsibilities to an object dynamically.
Decorators provide a flexible alternative to
sub classing for extending functionality.

The Factory Method Pattern defines an interface
for creating an object, but lets subclasses decide which
class to instantiate. Factory Method lets a class defer
instantiation to subclasses.

In simple factory pattern an object handle the instantiation 
of our concrete classes whereas in factory method pattern
subclasses take on that responsibility.

Dependency Inversion Principle suggests that our
high-level components should not depend on our low-level
components; rather, they should both depend on abstractions.

The Abstract Factory Pattern provides an interface
for creating families of related or dependent objects
without specifying their concrete classes.



